import { expect } from "chai";
import { ethers } from "hardhat";
import { TestMPT } from "../typechain";

describe("Merkle Patricia Trie tests", function () {
  let testMPT: TestMPT;

  beforeEach(async () => {
    const testMptFactory = await ethers.getContractFactory("TestMPT");
    testMPT = await testMptFactory.deploy();
  });

  it("should convert bytes to nibbles", async () => {
    let nibbles = await testMPT.bytesToNibbles("0x00", "0x");
    expect(nibbles).deep.equal("0x0000");

    nibbles = await testMPT.bytesToNibbles("0x10", "0x00");
    expect(nibbles).deep.equal("0x000100");

    nibbles = await testMPT.bytesToNibbles("0x112345", "0x00");
    expect(nibbles).deep.equal("0x00010102030405");

    nibbles = await testMPT.bytesToNibbles("0x00012345", "0x");
    expect(nibbles).deep.equal("0x0000000102030405");

    nibbles = await testMPT.bytesToNibbles("0x200f1cb8", "0x01");
    expect(nibbles).deep.equal("0x010200000f010c0b08");

    nibbles = await testMPT.bytesToNibbles("0x3f1cb8", "0x0102");
    expect(nibbles).deep.equal("0x0102030f010c0b08");
  });

  it("should get shared nibbles length from 2 bytes", async () => {
    let sharedLength = await testMPT.matchNibbles(
      Buffer.from(""),
      Buffer.from("a")
    );
    expect(sharedLength).deep.equal(0);

    sharedLength = await testMPT.matchNibbles(
      Buffer.from("a"),
      Buffer.from("")
    );
    expect(sharedLength).deep.equal(0);

    sharedLength = await testMPT.matchNibbles(
      Buffer.from("a"),
      Buffer.from("a")
    );
    expect(sharedLength).deep.equal(1);

    sharedLength = await testMPT.matchNibbles(
      Buffer.from("aaac"),
      Buffer.from("aaab")
    );
    expect(sharedLength).deep.equal(3);

    sharedLength = await testMPT.matchNibbles(
      Buffer.from("abcd"),
      Buffer.from("ab")
    );
    expect(sharedLength).deep.equal(2);

    sharedLength = await testMPT.matchNibbles(
      Buffer.from("abcd"),
      Buffer.from("abcdef")
    );
    expect(sharedLength).deep.equal(4);

    sharedLength = await testMPT.matchNibbles(
      Buffer.from("fedcba"),
      Buffer.from("abcdef")
    );
    expect(sharedLength).deep.equal(0);
  });

  it("should validate MPT proof and return the value of leaf node", async () => {
    let rootHash =
      "0x2d98966d69f4ada0703e8c02a1dbe5386762cc3b90fb9e94d7fe4cf81da744ea";
    let key = "0x00";
    let proofs = [
      "0xf90195822000b9018ff9018c9501f41a446a295d02e1a9d6ea341de9efb4e39910cdf858964d657373616765287374722c696e742c627974657329b83e6274703a2f2f30783563643235662e69636f6e2f63786331663639336331333639666161616335666532663465303435303234633066303330333564366601f90119b90116f90113b83e6274703a2f2f30783465353931382e69636f6e2f637866343161343436613239356430326531613964366561333431646539656662346533393931306364b83e6274703a2f2f30783563643235662e69636f6e2f637863316636393363313336396661616163356665326634653034353032346330663033303335643666865f6576656e7400b889f887844c696e6bf880b83e6274703a2f2f30783465353931382e69636f6e2f637866343161343436613239356430326531613964366561333431646539656662346533393931306364b83e6274703a2f2f30783563643235662e69636f6e2f637863316636393363313336396661616163356665326634653034353032346330663033303335643666",
    ];
    let res = await testMPT.callStatic.prove(rootHash, key, proofs);
    expect(res).deep.equal(
      "0xf9018c9501f41a446a295d02e1a9d6ea341de9efb4e39910cdf858964d657373616765287374722c696e742c627974657329b83e6274703a2f2f30783563643235662e69636f6e2f63786331663639336331333639666161616335666532663465303435303234633066303330333564366601f90119b90116f90113b83e6274703a2f2f30783465353931382e69636f6e2f637866343161343436613239356430326531613964366561333431646539656662346533393931306364b83e6274703a2f2f30783563643235662e69636f6e2f637863316636393363313336396661616163356665326634653034353032346330663033303335643666865f6576656e7400b889f887844c696e6bf880b83e6274703a2f2f30783465353931382e69636f6e2f637866343161343436613239356430326531613964366561333431646539656662346533393931306364b83e6274703a2f2f30783563643235662e69636f6e2f637863316636393363313336396661616163356665326634653034353032346330663033303335643666"
    );

    rootHash =
      "0x1d854f17d88a1be09b146325fe67fb6baaf5ab192f40fe07ecfa0f84d73179f7";
    key = "0x02";
    proofs = [
      "0xe210a0649ceaf94e739f89bbbd83ee6fdae6b979c401a6a6f13c3c598f72f6cdae799a",
      "0xf871a03820879dad43db74eb87a07da4ab0a5141c1379f79d98b29cb80f5a297ba60bfa01d13281e65471f09e46ac284af3e5f67715db5c73341c3391eb3a4bb6cc888ffa0baff8756de1ba52f32ca341fe264b3081a148b2629436252e713139c36568d928080808080808080808080808080",
      "0xef20adec0095002f071e05f858af2332c7c4ac7244319d14c233b2830493e0830186a08502e90edd0080f800f800f800",
    ];
    res = await testMPT.callStatic.prove(rootHash, key, proofs);
    expect(res).deep.equal(
      "0xec0095002f071e05f858af2332c7c4ac7244319d14c233b2830493e0830186a08502e90edd0080f800f800f800"
    );

    rootHash =
      "0xd6c78aa41d9ba127796aa9bab44e1b9ea9118e8f102b5b1d19ff9c3524fc8698";
    key = "0x00";
    proofs = [
      "0xe210a02e86a8f91ce74713198526c327a863b83d30672345e750ed6b65c2af393b92e7",
      "0xf851a0c95a885ab20c18b3af8bd81a25804369c5ebdd5082a47981933949c4c9f99849a010b969d5c75d29cc1710e8aa62d01d5a27a93925289616a58f16568b83fabf3a808080808080808080808080808080",
      "0xf9016420b90160f9015d950113f39ffc77aff9907521862b9e12276f8b6464b1f854964d657373616765287374722c696e742c627974657329b83a6274703a2f2f30783530312e7072612f30783735424164373363324436393641336636336631653844366364643364663037393764363737383002f8efb8edf8ebb8396274703a2f2f3078332e69636f6e2f637831336633396666633737616666393930373532313836326239653132323736663862363436346231b83a6274703a2f2f30783530312e7072612f3078373542416437336332443639364133663633663165384436636464336466303739376436373738308a6e6174697665636f696e01b866f86400b861f85faa687862366235373931626530623565663637303633623363313062383430666238313531346462326664aa307846663634643346366566453233313745453238303764323233613042646334633063343964664442c8c7834943588203e8",
    ];
    res = await testMPT.callStatic.prove(rootHash, key, proofs);
    expect(res).deep.equal(
      "0xf9015d950113f39ffc77aff9907521862b9e12276f8b6464b1f854964d657373616765287374722c696e742c627974657329b83a6274703a2f2f30783530312e7072612f30783735424164373363324436393641336636336631653844366364643364663037393764363737383002f8efb8edf8ebb8396274703a2f2f3078332e69636f6e2f637831336633396666633737616666393930373532313836326239653132323736663862363436346231b83a6274703a2f2f30783530312e7072612f3078373542416437336332443639364133663633663165384436636464336466303739376436373738308a6e6174697665636f696e01b866f86400b861f85faa687862366235373931626530623565663637303633623363313062383430666238313531346462326664aa307846663634643346366566453233313745453238303764323233613042646334633063343964664442c8c7834943588203e8"
    );
  });

  it("should revert if given serialized proofs length is invalid", async () => {
    const rootHash =
      "0xcaa6f66e5523800ef5b38afed1f69cae3d8dd634b8ad2a2c6719905bfdefd86d";
    const key = "0x01";
    const proofs = [
      "0xf884a1a03820879dad43db74eb87a07da4ab0a5141c1379f79d98b29cb80f5a297ba60bfa1a01d13281e65471f09e46ac284af3e5f67715db5c73341c3391eb3a4bb6cc888ffa1a0baff8756de1ba52f32ca341fe264b3081a148b2629436252e713139c36568d92818081808180818081808180818081808180818081808180818081808180",
    ];
    await expect(testMPT.prove(rootHash, key, proofs)).revertedWith(
      "MPTException: Invalid list length"
    );
  });

  it("should revert if root hash in proof is invalid", async () => {
    const rootHash =
      "0x2d854f17d88a1be09b146325fe67fb6baaf5ab192f40fe07ecfa0f84d73179f7";
    const key = "0x02";
    const proofs = [
      "0xe210a0649ceaf94e739f89bbbd83ee6fdae6b979c401a6a6f13c3c598f72f6cdae799a11",
      "0xf871a03820879dad43db74eb87a07da4ab0a5141c1379f79d98b29cb80f5a297ba60bfa01d13281e65471f09e46ac284af3e5f67715db5c73341c3391eb3a4bb6cc888ffa0baff8756de1ba52f32ca341fe264b3081a148b2629436252e713139c36568d928080808080808080808080808080",
      "0xef20adec0095002f071e05f858af2332c7c4ac7244319d14c233b2830493e0830186a08502e90edd0080f800f800f800",
    ];
    await expect(testMPT.prove(rootHash, key, proofs)).revertedWith(
      "MPTException: Mismatch hash"
    );
  });

  it("should revert if nibbles on extension are invalid", async () => {
    const rootHash =
      "0x1d854f17d88a1be09b146325fe67fb6baaf5ab192f40fe07ecfa0f84d73179f7";
    const key = "0x14";
    const proofs = [
      "0xe210a0649ceaf94e739f89bbbd83ee6fdae6b979c401a6a6f13c3c598f72f6cdae799a",
      "0xf871a03820879dad43db74eb87a07da4ab0a5141c1379f79d98b29cb80f5a297ba60bfa01d13281e65471f09e46ac284af3e5f67715db5c73341c3391eb3a4bb6cc888ffa0baff8756de1ba52f32ca341fe264b3081a148b2629436252e713139c36568d928080808080808080808080808080",
      "0xef20adec0095002f071e05f858af2332c7c4ac7244319d14c233b2830493e0830186a08502e90edd0080f800f800f800",
    ];
    await expect(testMPT.prove(rootHash, key, proofs)).revertedWith(
      "MPTException: Mismatch nibbles on extension"
    );
  });

  it("should revert if nibbles on leaf are invalid", async () => {
    const rootHash =
      "0x1d854f17d88a1be09b146325fe67fb6baaf5ab192f40fe07ecfa0f84d73179f7";
    const key = "0x0234";
    const proofs = [
      "0xe210a0649ceaf94e739f89bbbd83ee6fdae6b979c401a6a6f13c3c598f72f6cdae799a",
      "0xf871a03820879dad43db74eb87a07da4ab0a5141c1379f79d98b29cb80f5a297ba60bfa01d13281e65471f09e46ac284af3e5f67715db5c73341c3391eb3a4bb6cc888ffa0baff8756de1ba52f32ca341fe264b3081a148b2629436252e713139c36568d928080808080808080808080808080",
      "0xef20adec0095002f071e05f858af2332c7c4ac7244319d14c233b2830493e0830186a08502e90edd0080f800f800f800",
    ];
    await expect(testMPT.prove(rootHash, key, proofs)).revertedWith(
      "MPTException: Mismatch nibbles on leaf"
    );
  });
});
